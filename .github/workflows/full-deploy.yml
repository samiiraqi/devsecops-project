name: full-deploy

on:
  #push:
    #branches: [main]
    #paths: ['infra/**']  # Only when infrastructure code changes
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1
  ACCOUNT_ID: "156041402173"
  CLUSTER_NAME: devsecops
  TF_BACKEND_BUCKET: devsecops-156041402173-us-east-1
  TF_BACKEND_KEY: tfstate/devsecops-project.tfstate
  TF_LOCK_TABLE: terraform-locks
  TF_INPUT: "false"
  PYTHONPATH: .
  TERRAFORM_ROLE_ARN: arn:aws:iam::156041402173:role/devsecops-github-actions-role

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} #github expression syntax (workflow name,branch name)
  cancel-in-progress: true

jobs:
  infra-build-apply:
    runs-on: ubuntu-latest # We want to work on an Ubuntu computer (a type of Linux system)
    steps:
      - uses: actions/checkout@v4 # Now the host runner(vm) has all our project files to work with

      - name: Configure AWS (assume Terraform role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TERRAFORM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 #Install Terraform on the host runner(vm)
        with:
          terraform_version: 1.9.5

      - name: Ensure S3 backend bucket exists #When you use Terraform to build things in AWS, Terraform needs to remember what it built. It writes this information in a special file called "state file"
        run: |
          set -e
          if ! aws s3api head-bucket --bucket "$TF_BACKEND_BUCKET" >/dev/null 2>&1; then
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$TF_BACKEND_BUCKET"
            else
              aws s3api create-bucket --bucket "$TF_BACKEND_BUCKET" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
          fi
          aws s3api put-bucket-versioning --bucket "$TF_BACKEND_BUCKET" --versioning-configuration Status=Enabled || true
          aws s3api put-public-access-block --bucket "$TF_BACKEND_BUCKET" --public-access-block-configuration '{
            "BlockPublicAcls": true, "IgnorePublicAcls": true, "BlockPublicPolicy": true, "RestrictPublicBuckets": true
          }' || true

      - name: Ensure DynamoDB lock table exists #This prevents two people from changing infrastructure at the same time
        run: |
          aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null 2>&1 \
            || aws dynamodb create-table \
                 --table-name "$TF_LOCK_TABLE" \
                 --attribute-definitions AttributeName=LockID,AttributeType=S \
                 --key-schema AttributeName=LockID,KeyType=HASH \
                 --billing-mode PAY_PER_REQUEST

      - name: Backend preflight (S3 & Dynamo) #Make sure the S3 bucket and DynamoDB table exist and we can access them
        run: |
          aws sts get-caller-identity
          aws s3api head-bucket --bucket "$TF_BACKEND_BUCKET"
          aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" \
            --query 'Table.{Name:TableName,Status:TableStatus}' --output json

      - name: Write backend stub (S3) #Create a directory called infra and inside it create a file called backend.tf with the following content
        run: |
          mkdir -p infra
          printf 'terraform {\n  backend "s3" {}\n}\n' > infra/backend.tf

      - name: Terraform Init (S3 backend) #Terraform is now connected to remote storage and dynamodb and ready to work
        run: |
          terraform -chdir=infra init -upgrade \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_BACKEND_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_LOCK_TABLE}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate #Check if my Terraform code is written correctly
        run: terraform -chdir=infra validate

      - name: Terraform Plan (save JSON) #Now we have a detailed plan of what infrastructure will be created!
        run: |
          terraform -chdir=infra plan -lock-timeout=10m -input=false -out=tfplan
          terraform -chdir=infra show -json tfplan > /tmp/plan.json

      - name: Show planned resources (quick summary) #Show a quick summary of what will be created/changed/destroyed
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y jq; }
          jq -r '.resource_changes[] 
            | .type + "." + .name + " -> " + ( .change.actions | join(",") )' /tmp/plan.json || echo "No changes"

      - name: Terraform Apply 
        run: terraform -chdir=infra apply -lock-timeout=10m -auto-approve tfplan
