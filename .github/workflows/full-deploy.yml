name: Full Deploy (Guarded, OIDC)

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: devsecops
  NAMESPACE: devsecops
  ECR_REPO: devsecops
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/devsecops-github-actions-role

concurrency:
  group: full-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build_test_push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Set ECR registry & login (ensure repo exists)
        run: |
          echo "ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${ECR_REPO}" >/dev/null
          aws ecr get-login-password --region "${AWS_REGION}" | \
            docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Check if image for this commit already exists
        id: img
        run: |
          set -e
          IMAGE_SHA="${ECR_REGISTRY}/${ECR_REPO}:${GITHUB_SHA}"
          echo "IMAGE_SHA=${IMAGE_SHA}" >> $GITHUB_ENV
          if aws ecr describe-images --repository-name "${ECR_REPO}" \
               --image-ids imageTag="${GITHUB_SHA}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build image (tagged :sha and :latest)
        if: steps.img.outputs.exists == 'false'
        run: |
          IMAGE_LATEST="${ECR_REGISTRY}/${ECR_REPO}:latest"
          echo "IMAGE_LATEST=${IMAGE_LATEST}" >> $GITHUB_ENV
          docker build -t "${IMAGE_SHA}" .
          docker tag "${IMAGE_SHA}" "${IMAGE_LATEST}"

      - name: Run unit tests (inside app image)
        run: docker run --rm -e PYTHONPATH=/app -w /app "${IMAGE_SHA}" pytest

      - name: Push images (only if built here)
        if: steps.img.outputs.exists == 'false'
        run: |
          docker push "${IMAGE_SHA}"
          docker push "${IMAGE_LATEST}"

  terraform_apply:
    needs: build_test_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Apply
        working-directory: infra
        run: |
          terraform init
          terraform apply -auto-approve

  deploy_k8s:
    needs: terraform_apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          VER="$(curl -L -s https://dl.k8s.io/release/stable.txt)"
          curl -LO "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region "${AWS_REGION}" --name "${CLUSTER_NAME}"

      - name: Apply k8s/test.yaml (Namespace + Deployment + Service)
        run: kubectl apply -f k8s/test.yaml

      - name: Pin deployment to the image for this commit
        run: |
          kubectl -n "${NAMESPACE}" set image deploy/python-app python-app="${IMAGE_SHA}" --record
          kubectl -n "${NAMESPACE}" rollout status deploy/python-app --timeout=300s

      - name: Post-deployment health check (/health)
        env:
          SVC: python-app-service
        run: |
          URL=$(kubectl get svc "$SVC" -n "${NAMESPACE}" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$URL" ]; then
            URL=$(kubectl get svc "$SVC" -n "${NAMESPACE}" -o jsonpath='{.spec.clusterIP}')
          fi
          echo "Service URL: $URL"
          for i in {1..10}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://${URL}/health")
            echo "HTTP ${CODE}"
            [ "$CODE" = "200" ] && exit 0
            sleep 6
          done
          echo "Service not healthy"; exit 1
