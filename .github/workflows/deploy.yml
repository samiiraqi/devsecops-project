name: Build Push Deploy (OIDC)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: devsecops
  NAMESPACE: devsecops
  ECR_REPO: devsecops
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/devsecops-github-actions-role

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Login to ECR (ensure repo exists)
        run: |
          set -euo pipefail
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${ECR_REPO}" >/dev/null
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Build & push image
        run: |
          set -euo pipefail
          IMAGE="${ECR_REGISTRY}/${ECR_REPO}:latest"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          docker build -t "${IMAGE}" .
          docker push "${IMAGE}"

      - name: Install kubectl
        run: |
          set -e
          VER="$(curl -L -s https://dl.k8s.io/release/stable.txt)"
          curl -LO "https://dl.k8s.io/release/${VER}/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/
          kubectl version --client=true

      - name: Update kubeconfig & verify
        run: |
          set -e
          aws eks update-kubeconfig --region "${AWS_REGION}" --name "${CLUSTER_NAME}"
          kubectl get nodes

      - name: Apply manifests
        run: |
          set -e
          kubectl apply -f k8s/test.yaml
          kubectl -n "${NAMESPACE}" get deploy,svc -o wide || true

      - name: Set image & rollout
        run: |
          set -e
          kubectl -n "${NAMESPACE}" set image deploy/python-app python-app="${IMAGE}" --record
          kubectl -n "${NAMESPACE}" rollout status deploy/python-app --timeout=5m
          kubectl -n "${NAMESPACE}" get pods -o wide

      - name: Show Service address
        run: kubectl get svc -n "${NAMESPACE}" -o wide
