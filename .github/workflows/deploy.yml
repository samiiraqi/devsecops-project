name: Build Push Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install AWS CLI
        uses: aws-actions/setup-aws-cli@v2

      # Decide auth method without using 'secrets' in an if:
      - name: Decide auth method
        id: auth
        env:
          ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        run: |
          if [ -n "$ROLE_ARN" ]; then
            echo "method=oidc" >> $GITHUB_OUTPUT
          else
            echo "method=keys" >> $GITHUB_OUTPUT
          fi

      # OIDC path (runs only if you set AWS_ROLE_ARN secret)
      - name: Configure AWS via OIDC
        if: steps.auth.outputs.method == 'oidc'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      # Static access keys path (runs only if no AWS_ROLE_ARN secret)
      - name: Configure AWS via access keys
        if: steps.auth.outputs.method == 'keys'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          ECR_REPO: devsecops
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/${ECR_REPO}:latest"
          echo "Building $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name devsecops
          kubectl version --client=true
          kubectl cluster-info

      - name: Ensure namespace exists
        run: |
          kubectl get ns devsecops || kubectl create ns devsecops

      - name: Deploy manifests
        run: |
          kubectl apply -f k8s/test.yaml

      - name: Set image and rollout
        run: |
          kubectl set image -n devsecops deploy/python-app python-app="$IMAGE" --record
          kubectl rollout status -n devsecops deploy/python-app

      - name: Show Service address
        run: |
          kubectl get svc -n devsecops -o wide
